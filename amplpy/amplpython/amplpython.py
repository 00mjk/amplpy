# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_amplpython', [dirname(__file__)])
        except ImportError:
            import _amplpython
            return _amplpython
        if fp is not None:
            try:
                _mod = imp.load_module('_amplpython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _amplpython = swig_import_helper()
    del swig_import_helper
else:
    import _amplpython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _amplpython.StringArray_size(self)

    def getIndex(self, index):
        return _amplpython.StringArray_getIndex(self, index)
    __swig_destroy__ = _amplpython.delete_StringArray
    __del__ = lambda self: None
StringArray_swigregister = _amplpython.StringArray_swigregister
StringArray_swigregister(StringArray)

class StringRefArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringRefArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringRefArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _amplpython.StringRefArray_size(self)

    def getIndex(self, index):
        return _amplpython.StringRefArray_getIndex(self, index)
    __swig_destroy__ = _amplpython.delete_StringRefArray
    __del__ = lambda self: None
StringRefArray_swigregister = _amplpython.StringRefArray_swigregister
StringRefArray_swigregister(StringRefArray)

class VariantArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariantArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariantArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _amplpython.new_VariantArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_VariantArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _amplpython.VariantArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpython.VariantArray___setitem__(self, index, value)

    def cast(self):
        return _amplpython.VariantArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _amplpython.VariantArray_frompointer
    if _newclass:
        frompointer = staticmethod(_amplpython.VariantArray_frompointer)
VariantArray_swigregister = _amplpython.VariantArray_swigregister
VariantArray_swigregister(VariantArray)

def VariantArray_frompointer(t):
    return _amplpython.VariantArray_frompointer(t)
VariantArray_frompointer = _amplpython.VariantArray_frompointer

class TupleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TupleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TupleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _amplpython.new_TupleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_TupleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _amplpython.TupleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpython.TupleArray___setitem__(self, index, value)

    def cast(self):
        return _amplpython.TupleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _amplpython.TupleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_amplpython.TupleArray_frompointer)
TupleArray_swigregister = _amplpython.TupleArray_swigregister
TupleArray_swigregister(TupleArray)

def TupleArray_frompointer(t):
    return _amplpython.TupleArray_frompointer(t)
TupleArray_frompointer = _amplpython.TupleArray_frompointer

class OptionalInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_OptionalInt(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __nonzero__(self):
        return _amplpython.OptionalInt___nonzero__(self)
    __bool__ = __nonzero__



    def value(self):
        return _amplpython.OptionalInt_value(self)
    __swig_destroy__ = _amplpython.delete_OptionalInt
    __del__ = lambda self: None
OptionalInt_swigregister = _amplpython.OptionalInt_swigregister
OptionalInt_swigregister(OptionalInt)

class OptionalString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_OptionalString(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __nonzero__(self):
        return _amplpython.OptionalString___nonzero__(self)
    __bool__ = __nonzero__



    def value(self):
        return _amplpython.OptionalString_value(self)
    __swig_destroy__ = _amplpython.delete_OptionalString
    __del__ = lambda self: None
OptionalString_swigregister = _amplpython.OptionalString_swigregister
OptionalString_swigregister(OptionalString)

class OptionalBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalBool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_OptionalBool(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __nonzero__(self):
        return _amplpython.OptionalBool___nonzero__(self)
    __bool__ = __nonzero__



    def value(self):
        return _amplpython.OptionalBool_value(self)
    __swig_destroy__ = _amplpython.delete_OptionalBool
    __del__ = lambda self: None
OptionalBool_swigregister = _amplpython.OptionalBool_swigregister
OptionalBool_swigregister(OptionalBool)

class OptionalDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionalDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionalDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_OptionalDouble(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __nonzero__(self):
        return _amplpython.OptionalDouble___nonzero__(self)
    __bool__ = __nonzero__



    def value(self):
        return _amplpython.OptionalDouble_value(self)
    __swig_destroy__ = _amplpython.delete_OptionalDouble
    __del__ = lambda self: None
OptionalDouble_swigregister = _amplpython.OptionalDouble_swigregister
OptionalDouble_swigregister(OptionalDouble)


_amplpython.EMPTY_swigconstant(_amplpython)
EMPTY = _amplpython.EMPTY

_amplpython.NUMERIC_swigconstant(_amplpython)
NUMERIC = _amplpython.NUMERIC

_amplpython.STRING_swigconstant(_amplpython)
STRING = _amplpython.STRING
class Variant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_Variant(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def str(self):
        return _amplpython.Variant_str(self)

    def dbl(self):
        return _amplpython.Variant_dbl(self)

    def type(self):
        return _amplpython.Variant_type(self)

    def toString(self):
        return _amplpython.Variant_toString(self)

    def equals(self, b):
        return _amplpython.Variant_equals(self, b)

    def compare(self, b):
        return _amplpython.Variant_compare(self, b)
    __swig_destroy__ = _amplpython.delete_Variant
    __del__ = lambda self: None
Variant_swigregister = _amplpython.Variant_swigregister
Variant_swigregister(Variant)

class VariantRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariantRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariantRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_VariantRef(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def str(self):
        return _amplpython.VariantRef_str(self)

    def dbl(self):
        return _amplpython.VariantRef_dbl(self)

    def type(self):
        return _amplpython.VariantRef_type(self)

    def toString(self):
        return _amplpython.VariantRef_toString(self)

    def equals(self, b):
        return _amplpython.VariantRef_equals(self, b)

    def compare(self, b):
        return _amplpython.VariantRef_compare(self, b)
    __swig_destroy__ = _amplpython.delete_VariantRef
    __del__ = lambda self: None
VariantRef_swigregister = _amplpython.VariantRef_swigregister
VariantRef_swigregister(VariantRef)

class TupleRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TupleRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TupleRef, name)
    __repr__ = _swig_repr

    def __init__(self, t):
        this = _amplpython.new_TupleRef(t)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def size(self):
        return _amplpython.TupleRef_size(self)

    def toString(self):
        return _amplpython.TupleRef_toString(self)

    def getIndex(self, index):
        return _amplpython.TupleRef_getIndex(self, index)
    __swig_destroy__ = _amplpython.delete_TupleRef
    __del__ = lambda self: None
TupleRef_swigregister = _amplpython.TupleRef_swigregister
TupleRef_swigregister(TupleRef)

class Tuple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tuple, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_Tuple(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def size(self):
        return _amplpython.Tuple_size(self)

    def toString(self):
        return _amplpython.Tuple_toString(self)

    def getIndex(self, index):
        return _amplpython.Tuple_getIndex(self, index)

    def equals(self, other):
        return _amplpython.Tuple_equals(self, other)
    __swig_getmethods__["Factory"] = lambda x: _amplpython.Tuple_Factory
    if _newclass:
        Factory = staticmethod(_amplpython.Tuple_Factory)
    __swig_destroy__ = _amplpython.delete_Tuple
    __del__ = lambda self: None
Tuple_swigregister = _amplpython.Tuple_swigregister
Tuple_swigregister(Tuple)

def Tuple_Factory(*args):
    return _amplpython.Tuple_Factory(*args)
Tuple_Factory = _amplpython.Tuple_Factory

class DataFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataFrame, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_DataFrame
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _amplpython.new_DataFrame(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self, df):
        return _amplpython.DataFrame_clone(self, df)

    def getNumCols(self):
        return _amplpython.DataFrame_getNumCols(self)

    def getNumRows(self):
        return _amplpython.DataFrame_getNumRows(self)

    def getNumIndices(self):
        return _amplpython.DataFrame_getNumIndices(self)

    def reserve(self, numRows):
        return _amplpython.DataFrame_reserve(self, numRows)

    def toString(self):
        return _amplpython.DataFrame_toString(self)

    def getColumn(self, header):
        return _amplpython.DataFrame_getColumn(self, header)

    def getRowByIndex(self, index):
        return _amplpython.DataFrame_getRowByIndex(self, index)

    def getHeaders(self):
        return _amplpython.DataFrame_getHeaders(self)

    def impl(self):
        return _amplpython.DataFrame_impl(self)

    def addColumn(self, header):
        return _amplpython.DataFrame_addColumn(self, header)

    def addColumnStr(self, header, args):
        return _amplpython.DataFrame_addColumnStr(self, header, args)

    def addColumnDbl(self, header, args):
        return _amplpython.DataFrame_addColumnDbl(self, header, args)

    def addRow(self, *args):
        return _amplpython.DataFrame_addRow(self, *args)

    def getRow(self, *args):
        return _amplpython.DataFrame_getRow(self, *args)

    def setColumnStr(self, header, args, n):
        return _amplpython.DataFrame_setColumnStr(self, header, args, n)

    def setColumnDbl(self, header, values, n):
        return _amplpython.DataFrame_setColumnDbl(self, header, values, n)

    def setArrayDblDbl(self, args, values, n):
        return _amplpython.DataFrame_setArrayDblDbl(self, args, values, n)

    def setArrayStrDbl(self, args, values, n):
        return _amplpython.DataFrame_setArrayStrDbl(self, args, values, n)

    def setArrayDblStr(self, args, values, n):
        return _amplpython.DataFrame_setArrayDblStr(self, args, values, n)

    def setArrayStrStr(self, args, values, n):
        return _amplpython.DataFrame_setArrayStrStr(self, args, values, n)

    def setMatrixDblDblDbl(self, row_indices, rown, col_indices, coln, values):
        return _amplpython.DataFrame_setMatrixDblDblDbl(self, row_indices, rown, col_indices, coln, values)

    def setMatrixStrStrDbl(self, row_indices, rown, col_indices, coln, values):
        return _amplpython.DataFrame_setMatrixStrStrDbl(self, row_indices, rown, col_indices, coln, values)

    def setMatrixDblStrDbl(self, row_indices, rown, col_indices, coln, values):
        return _amplpython.DataFrame_setMatrixDblStrDbl(self, row_indices, rown, col_indices, coln, values)

    def setMatrixStrDblDbl(self, row_indices, rown, col_indices, coln, values):
        return _amplpython.DataFrame_setMatrixStrDblDbl(self, row_indices, rown, col_indices, coln, values)

    def setMatrixDblDblStr(self, row_indices, rown, col_indices, coln, args):
        return _amplpython.DataFrame_setMatrixDblDblStr(self, row_indices, rown, col_indices, coln, args)

    def setMatrixDblStrStr(self, row_indices, rown, col_indices, coln, args):
        return _amplpython.DataFrame_setMatrixDblStrStr(self, row_indices, rown, col_indices, coln, args)

    def setMatrixStrDblStr(self, row_indices, rown, col_indices, coln, args):
        return _amplpython.DataFrame_setMatrixStrDblStr(self, row_indices, rown, col_indices, coln, args)

    def setMatrixStrStrStr(self, row_indices, rown, col_indices, coln, args):
        return _amplpython.DataFrame_setMatrixStrStrStr(self, row_indices, rown, col_indices, coln, args)
    __swig_getmethods__["factory"] = lambda x: _amplpython.DataFrame_factory
    if _newclass:
        factory = staticmethod(_amplpython.DataFrame_factory)
DataFrame_swigregister = _amplpython.DataFrame_swigregister
DataFrame_swigregister(DataFrame)

def DataFrame_factory(numberOfIndexColumns, args, count):
    return _amplpython.DataFrame_factory(numberOfIndexColumns, args, count)
DataFrame_factory = _amplpython.DataFrame_factory

class DataFrameColumn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataFrameColumn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataFrameColumn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _amplpython.DataFrameColumn_size(self)

    def begin(self):
        return _amplpython.DataFrameColumn_begin(self)

    def end(self):
        return _amplpython.DataFrameColumn_end(self)

    def getIndex(self, index):
        return _amplpython.DataFrameColumn_getIndex(self, index)
    __swig_destroy__ = _amplpython.delete_DataFrameColumn
    __del__ = lambda self: None
DataFrameColumn_swigregister = _amplpython.DataFrameColumn_swigregister
DataFrameColumn_swigregister(DataFrameColumn)

class ColIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.ColIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.ColIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.ColIterator___ref__(self)

    def clone(self, other):
        return _amplpython.ColIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.ColIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.ColIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_ColIterator
    __del__ = lambda self: None
ColIterator_swigregister = _amplpython.ColIterator_swigregister
ColIterator_swigregister(ColIterator)

class DataFrameRow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataFrameRow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataFrameRow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _amplpython.DataFrameRow_size(self)

    def begin(self):
        return _amplpython.DataFrameRow_begin(self)

    def end(self):
        return _amplpython.DataFrameRow_end(self)

    def getIndex(self, index):
        return _amplpython.DataFrameRow_getIndex(self, index)
    __swig_destroy__ = _amplpython.delete_DataFrameRow
    __del__ = lambda self: None
DataFrameRow_swigregister = _amplpython.DataFrameRow_swigregister
DataFrameRow_swigregister(DataFrameRow)

class RowIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.RowIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.RowIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.RowIterator___ref__(self)

    def clone(self, other):
        return _amplpython.RowIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.RowIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.RowIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_RowIterator
    __del__ = lambda self: None
RowIterator_swigregister = _amplpython.RowIterator_swigregister
RowIterator_swigregister(RowIterator)

class Instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def toString(self):
        return _amplpython.Instance_toString(self)

    def name(self):
        return _amplpython.Instance_name(self)

    def entity(self):
        return _amplpython.Instance_entity(self)
    __swig_destroy__ = _amplpython.delete_Instance
    __del__ = lambda self: None
Instance_swigregister = _amplpython.Instance_swigregister
Instance_swigregister(Instance)

class SetInstance(Instance):
    __swig_setmethods__ = {}
    for _s in [Instance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Instance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SetInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        return _amplpython.SetInstance_size(self)

    def contains(self, t):
        return _amplpython.SetInstance_contains(self, t)

    def getValues(self):
        return _amplpython.SetInstance_getValues(self)

    def members(self):
        return _amplpython.SetInstance_members(self)

    def Contains(self, t):
        return _amplpython.SetInstance_Contains(self, t)

    def setValues(self, *args):
        return _amplpython.SetInstance_setValues(self, *args)
    __swig_destroy__ = _amplpython.delete_SetInstance
    __del__ = lambda self: None
SetInstance_swigregister = _amplpython.SetInstance_swigregister
SetInstance_swigregister(SetInstance)

class MemberRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemberRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemberRange, name)
    __repr__ = _swig_repr

    def __init__(self, impl_):
        this = _amplpython.new_MemberRange(impl_)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def begin(self):
        return _amplpython.MemberRange_begin(self)

    def end(self):
        return _amplpython.MemberRange_end(self)
    __swig_destroy__ = _amplpython.delete_MemberRange
    __del__ = lambda self: None
MemberRange_swigregister = _amplpython.MemberRange_swigregister
MemberRange_swigregister(MemberRange)

class iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __ref__(self):
        return _amplpython.iterator___ref__(self)

    def postIncrement(self):
        return _amplpython.iterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.iterator_postIncrementBy(self, arg2)

    def equals(self, other):
        return _amplpython.iterator_equals(self, other)

    def differs(self, other):
        return _amplpython.iterator_differs(self, other)
    __swig_destroy__ = _amplpython.delete_iterator
    __del__ = lambda self: None
iterator_swigregister = _amplpython.iterator_swigregister
iterator_swigregister(iterator)

class ObjectiveInstance(Instance):
    __swig_setmethods__ = {}
    for _s in [Instance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectiveInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Instance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectiveInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _amplpython.ObjectiveInstance_value(self)

    def astatus(self):
        return _amplpython.ObjectiveInstance_astatus(self)

    def sstatus(self):
        return _amplpython.ObjectiveInstance_sstatus(self)

    def exitcode(self):
        return _amplpython.ObjectiveInstance_exitcode(self)

    def message(self):
        return _amplpython.ObjectiveInstance_message(self)

    def result(self):
        return _amplpython.ObjectiveInstance_result(self)

    def drop(self):
        return _amplpython.ObjectiveInstance_drop(self)

    def restore(self):
        return _amplpython.ObjectiveInstance_restore(self)

    def minimization(self):
        return _amplpython.ObjectiveInstance_minimization(self)
    __swig_destroy__ = _amplpython.delete_ObjectiveInstance
    __del__ = lambda self: None
ObjectiveInstance_swigregister = _amplpython.ObjectiveInstance_swigregister
ObjectiveInstance_swigregister(ObjectiveInstance)

class VariableInstance(Instance):
    __swig_setmethods__ = {}
    for _s in [Instance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Instance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VariableInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fix(self, *args):
        return _amplpython.VariableInstance_fix(self, *args)

    def unfix(self):
        return _amplpython.VariableInstance_unfix(self)

    def setValue(self, value):
        return _amplpython.VariableInstance_setValue(self, value)

    def value(self):
        return _amplpython.VariableInstance_value(self)

    def defeqn(self):
        return _amplpython.VariableInstance_defeqn(self)

    def dual(self):
        return _amplpython.VariableInstance_dual(self)

    def init(self):
        return _amplpython.VariableInstance_init(self)

    def init0(self):
        return _amplpython.VariableInstance_init0(self)

    def lb(self):
        return _amplpython.VariableInstance_lb(self)

    def ub(self):
        return _amplpython.VariableInstance_ub(self)

    def lb0(self):
        return _amplpython.VariableInstance_lb0(self)

    def ub0(self):
        return _amplpython.VariableInstance_ub0(self)

    def lb1(self):
        return _amplpython.VariableInstance_lb1(self)

    def ub1(self):
        return _amplpython.VariableInstance_ub1(self)

    def lb2(self):
        return _amplpython.VariableInstance_lb2(self)

    def ub2(self):
        return _amplpython.VariableInstance_ub2(self)

    def lrc(self):
        return _amplpython.VariableInstance_lrc(self)

    def urc(self):
        return _amplpython.VariableInstance_urc(self)

    def lslack(self):
        return _amplpython.VariableInstance_lslack(self)

    def uslack(self):
        return _amplpython.VariableInstance_uslack(self)

    def rc(self):
        return _amplpython.VariableInstance_rc(self)

    def slack(self):
        return _amplpython.VariableInstance_slack(self)

    def astatus(self):
        return _amplpython.VariableInstance_astatus(self)

    def sstatus(self):
        return _amplpython.VariableInstance_sstatus(self)

    def status(self):
        return _amplpython.VariableInstance_status(self)
    __swig_destroy__ = _amplpython.delete_VariableInstance
    __del__ = lambda self: None
VariableInstance_swigregister = _amplpython.VariableInstance_swigregister
VariableInstance_swigregister(VariableInstance)

class ConstraintInstance(Instance):
    __swig_setmethods__ = {}
    for _s in [Instance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Instance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def drop(self):
        return _amplpython.ConstraintInstance_drop(self)

    def restore(self):
        return _amplpython.ConstraintInstance_restore(self)

    def body(self):
        return _amplpython.ConstraintInstance_body(self)

    def astatus(self):
        return _amplpython.ConstraintInstance_astatus(self)

    def defvar(self):
        return _amplpython.ConstraintInstance_defvar(self)

    def dinit(self):
        return _amplpython.ConstraintInstance_dinit(self)

    def dinit0(self):
        return _amplpython.ConstraintInstance_dinit0(self)

    def dual(self):
        return _amplpython.ConstraintInstance_dual(self)

    def lb(self):
        return _amplpython.ConstraintInstance_lb(self)

    def ub(self):
        return _amplpython.ConstraintInstance_ub(self)

    def lbs(self):
        return _amplpython.ConstraintInstance_lbs(self)

    def ubs(self):
        return _amplpython.ConstraintInstance_ubs(self)

    def ldual(self):
        return _amplpython.ConstraintInstance_ldual(self)

    def udual(self):
        return _amplpython.ConstraintInstance_udual(self)

    def lslack(self):
        return _amplpython.ConstraintInstance_lslack(self)

    def uslack(self):
        return _amplpython.ConstraintInstance_uslack(self)

    def slack(self):
        return _amplpython.ConstraintInstance_slack(self)

    def sstatus(self):
        return _amplpython.ConstraintInstance_sstatus(self)

    def status(self):
        return _amplpython.ConstraintInstance_status(self)

    def setDual(self, dual):
        return _amplpython.ConstraintInstance_setDual(self, dual)

    def val(self):
        return _amplpython.ConstraintInstance_val(self)
    __swig_destroy__ = _amplpython.delete_ConstraintInstance
    __del__ = lambda self: None
ConstraintInstance_swigregister = _amplpython.ConstraintInstance_swigregister
ConstraintInstance_swigregister(ConstraintInstance)

class EntityArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _amplpython.new_EntityArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_EntityArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _amplpython.EntityArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _amplpython.EntityArray___setitem__(self, index, value)

    def cast(self):
        return _amplpython.EntityArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _amplpython.EntityArray_frompointer
    if _newclass:
        frompointer = staticmethod(_amplpython.EntityArray_frompointer)
EntityArray_swigregister = _amplpython.EntityArray_swigregister
EntityArray_swigregister(EntityArray)

def EntityArray_frompointer(t):
    return _amplpython.EntityArray_frompointer(t)
EntityArray_frompointer = _amplpython.EntityArray_frompointer

class Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def toString(self):
        return _amplpython.Entity_toString(self)

    def name(self):
        return _amplpython.Entity_name(self)

    def indexarity(self):
        return _amplpython.Entity_indexarity(self)

    def isScalar(self):
        return _amplpython.Entity_isScalar(self)

    def numInstances(self):
        return _amplpython.Entity_numInstances(self)

    def getIndexingSets(self):
        return _amplpython.Entity_getIndexingSets(self)

    def setValues(self, data):
        return _amplpython.Entity_setValues(self, data)

    def getValues(self, *args):
        return _amplpython.Entity_getValues(self, *args)
    __swig_destroy__ = _amplpython.delete_Entity
    __del__ = lambda self: None
Entity_swigregister = _amplpython.Entity_swigregister
Entity_swigregister(Entity)

class EntityArgs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityArgs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityArgs, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Factory"] = lambda x: _amplpython.EntityArgs_Factory
    if _newclass:
        Factory = staticmethod(_amplpython.EntityArgs_Factory)
    __swig_destroy__ = _amplpython.delete_EntityArgs
    __del__ = lambda self: None
EntityArgs_swigregister = _amplpython.EntityArgs_swigregister
EntityArgs_swigregister(EntityArgs)

def EntityArgs_Factory(args, count):
    return _amplpython.EntityArgs_Factory(args, count)
EntityArgs_Factory = _amplpython.EntityArgs_Factory

class BasicEntityVariable(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEntityVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEntityVariable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.BasicEntityVariable_begin(self)

    def end(self):
        return _amplpython.BasicEntityVariable_end(self)

    def find(self, t):
        return _amplpython.BasicEntityVariable_find(self, t)

    def get(self, *args):
        return _amplpython.BasicEntityVariable_get(self, *args)
    __swig_destroy__ = _amplpython.delete_BasicEntityVariable
    __del__ = lambda self: None
BasicEntityVariable_swigregister = _amplpython.BasicEntityVariable_swigregister
BasicEntityVariable_swigregister(BasicEntityVariable)

class BasicEntityConstraint(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEntityConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEntityConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.BasicEntityConstraint_begin(self)

    def end(self):
        return _amplpython.BasicEntityConstraint_end(self)

    def find(self, t):
        return _amplpython.BasicEntityConstraint_find(self, t)

    def get(self, *args):
        return _amplpython.BasicEntityConstraint_get(self, *args)
    __swig_destroy__ = _amplpython.delete_BasicEntityConstraint
    __del__ = lambda self: None
BasicEntityConstraint_swigregister = _amplpython.BasicEntityConstraint_swigregister
BasicEntityConstraint_swigregister(BasicEntityConstraint)

class BasicEntitySet(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEntitySet, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEntitySet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.BasicEntitySet_begin(self)

    def end(self):
        return _amplpython.BasicEntitySet_end(self)

    def find(self, t):
        return _amplpython.BasicEntitySet_find(self, t)

    def get(self, *args):
        return _amplpython.BasicEntitySet_get(self, *args)
    __swig_destroy__ = _amplpython.delete_BasicEntitySet
    __del__ = lambda self: None
BasicEntitySet_swigregister = _amplpython.BasicEntitySet_swigregister
BasicEntitySet_swigregister(BasicEntitySet)

class BasicEntityObjective(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEntityObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEntityObjective, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.BasicEntityObjective_begin(self)

    def end(self):
        return _amplpython.BasicEntityObjective_end(self)

    def find(self, t):
        return _amplpython.BasicEntityObjective_find(self, t)

    def get(self, *args):
        return _amplpython.BasicEntityObjective_get(self, *args)
    __swig_destroy__ = _amplpython.delete_BasicEntityObjective
    __del__ = lambda self: None
BasicEntityObjective_swigregister = _amplpython.BasicEntityObjective_swigregister
BasicEntityObjective_swigregister(BasicEntityObjective)

class BasicEntityParameter(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEntityParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEntityParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.BasicEntityParameter_begin(self)

    def end(self):
        return _amplpython.BasicEntityParameter_end(self)

    def find(self, t):
        return _amplpython.BasicEntityParameter_find(self, t)

    def get(self, *args):
        return _amplpython.BasicEntityParameter_get(self, *args)
    __swig_destroy__ = _amplpython.delete_BasicEntityParameter
    __del__ = lambda self: None
BasicEntityParameter_swigregister = _amplpython.BasicEntityParameter_swigregister
BasicEntityParameter_swigregister(BasicEntityParameter)

class Constraint(BasicEntityConstraint):
    __swig_setmethods__ = {}
    for _s in [BasicEntityConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicEntityConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isLogical(self):
        return _amplpython.Constraint_isLogical(self)

    def drop(self):
        return _amplpython.Constraint_drop(self)

    def restore(self):
        return _amplpython.Constraint_restore(self)

    def body(self):
        return _amplpython.Constraint_body(self)

    def astatus(self):
        return _amplpython.Constraint_astatus(self)

    def defvar(self):
        return _amplpython.Constraint_defvar(self)

    def dinit(self):
        return _amplpython.Constraint_dinit(self)

    def dinit0(self):
        return _amplpython.Constraint_dinit0(self)

    def dual(self):
        return _amplpython.Constraint_dual(self)

    def lb(self):
        return _amplpython.Constraint_lb(self)

    def ub(self):
        return _amplpython.Constraint_ub(self)

    def lbs(self):
        return _amplpython.Constraint_lbs(self)

    def ubs(self):
        return _amplpython.Constraint_ubs(self)

    def ldual(self):
        return _amplpython.Constraint_ldual(self)

    def udual(self):
        return _amplpython.Constraint_udual(self)

    def lslack(self):
        return _amplpython.Constraint_lslack(self)

    def uslack(self):
        return _amplpython.Constraint_uslack(self)

    def slack(self):
        return _amplpython.Constraint_slack(self)

    def sstatus(self):
        return _amplpython.Constraint_sstatus(self)

    def status(self):
        return _amplpython.Constraint_status(self)

    def setDual(self, dual):
        return _amplpython.Constraint_setDual(self, dual)

    def val(self):
        return _amplpython.Constraint_val(self)
    __swig_destroy__ = _amplpython.delete_Constraint
    __del__ = lambda self: None
Constraint_swigregister = _amplpython.Constraint_swigregister
Constraint_swigregister(Constraint)

class Variable(BasicEntityVariable):
    __swig_setmethods__ = {}
    for _s in [BasicEntityVariable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicEntityVariable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fix(self, *args):
        return _amplpython.Variable_fix(self, *args)

    def unfix(self):
        return _amplpython.Variable_unfix(self)

    def setValue(self, value):
        return _amplpython.Variable_setValue(self, value)

    def value(self):
        return _amplpython.Variable_value(self)

    def astatus(self):
        return _amplpython.Variable_astatus(self)

    def defeqn(self):
        return _amplpython.Variable_defeqn(self)

    def dual(self):
        return _amplpython.Variable_dual(self)

    def init(self):
        return _amplpython.Variable_init(self)

    def init0(self):
        return _amplpython.Variable_init0(self)

    def lb(self):
        return _amplpython.Variable_lb(self)

    def ub(self):
        return _amplpython.Variable_ub(self)

    def lb0(self):
        return _amplpython.Variable_lb0(self)

    def ub0(self):
        return _amplpython.Variable_ub0(self)

    def lb1(self):
        return _amplpython.Variable_lb1(self)

    def ub1(self):
        return _amplpython.Variable_ub1(self)

    def lb2(self):
        return _amplpython.Variable_lb2(self)

    def ub2(self):
        return _amplpython.Variable_ub2(self)

    def lrc(self):
        return _amplpython.Variable_lrc(self)

    def urc(self):
        return _amplpython.Variable_urc(self)

    def lslack(self):
        return _amplpython.Variable_lslack(self)

    def uslack(self):
        return _amplpython.Variable_uslack(self)

    def rc(self):
        return _amplpython.Variable_rc(self)

    def slack(self):
        return _amplpython.Variable_slack(self)

    def sstatus(self):
        return _amplpython.Variable_sstatus(self)

    def status(self):
        return _amplpython.Variable_status(self)
    __swig_destroy__ = _amplpython.delete_Variable
    __del__ = lambda self: None
Variable_swigregister = _amplpython.Variable_swigregister
Variable_swigregister(Variable)

class Objective(BasicEntityObjective):
    __swig_setmethods__ = {}
    for _s in [BasicEntityObjective]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicEntityObjective]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Objective, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        return _amplpython.Objective_value(self)

    def astatus(self):
        return _amplpython.Objective_astatus(self)

    def sstatus(self):
        return _amplpython.Objective_sstatus(self)

    def exitcode(self):
        return _amplpython.Objective_exitcode(self)

    def message(self):
        return _amplpython.Objective_message(self)

    def result(self):
        return _amplpython.Objective_result(self)

    def drop(self):
        return _amplpython.Objective_drop(self)

    def restore(self):
        return _amplpython.Objective_restore(self)

    def minimization(self):
        return _amplpython.Objective_minimization(self)
    __swig_destroy__ = _amplpython.delete_Objective
    __del__ = lambda self: None
Objective_swigregister = _amplpython.Objective_swigregister
Objective_swigregister(Objective)

class Set(BasicEntitySet):
    __swig_setmethods__ = {}
    for _s in [BasicEntitySet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Set, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicEntitySet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Set, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def arity(self):
        return _amplpython.Set_arity(self)

    def getValues(self):
        return _amplpython.Set_getValues(self)

    def size(self):
        return _amplpython.Set_size(self)

    def contains(self, t):
        return _amplpython.Set_contains(self, t)

    def setValues(self, *args):
        return _amplpython.Set_setValues(self, *args)
    __swig_destroy__ = _amplpython.delete_Set
    __del__ = lambda self: None
Set_swigregister = _amplpython.Set_swigregister
Set_swigregister(Set)

class Parameter(BasicEntityParameter):
    __swig_setmethods__ = {}
    for _s in [BasicEntityParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicEntityParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isSymbolic(self):
        return _amplpython.Parameter_isSymbolic(self)

    def hasDefault(self):
        return _amplpython.Parameter_hasDefault(self)

    def set(self, *args):
        return _amplpython.Parameter_set(self, *args)

    def setValuesTaDbl(self, indices, values, nvalues):
        return _amplpython.Parameter_setValuesTaDbl(self, indices, values, nvalues)

    def setValuesTaStr(self, indices, args, nvalues):
        return _amplpython.Parameter_setValuesTaStr(self, indices, args, nvalues)

    def setValuesDbl(self, values, n):
        return _amplpython.Parameter_setValuesDbl(self, values, n)

    def setValuesStr(self, args, n):
        return _amplpython.Parameter_setValuesStr(self, args, n)

    def setValues(self, *args):
        return _amplpython.Parameter_setValues(self, *args)
    __swig_destroy__ = _amplpython.delete_Parameter
    __del__ = lambda self: None
Parameter_swigregister = _amplpython.Parameter_swigregister
Parameter_swigregister(Parameter)

class VariableIteratorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableIteratorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariableIteratorWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_VariableIteratorWrapper
    __del__ = lambda self: None
VariableIteratorWrapper_swigregister = _amplpython.VariableIteratorWrapper_swigregister
VariableIteratorWrapper_swigregister(VariableIteratorWrapper)

class VariableIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariableIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.VariableIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.VariableIterator_differs(self, other)

    def clone(self, other):
        return _amplpython.VariableIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.VariableIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.VariableIterator_postIncrementBy(self, arg2)

    def first(self):
        return _amplpython.VariableIterator_first(self)

    def second(self):
        return _amplpython.VariableIterator_second(self)
    __swig_destroy__ = _amplpython.delete_VariableIterator
    __del__ = lambda self: None
VariableIterator_swigregister = _amplpython.VariableIterator_swigregister
VariableIterator_swigregister(VariableIterator)

class ConstraintIteratorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintIteratorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintIteratorWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_ConstraintIteratorWrapper
    __del__ = lambda self: None
ConstraintIteratorWrapper_swigregister = _amplpython.ConstraintIteratorWrapper_swigregister
ConstraintIteratorWrapper_swigregister(ConstraintIteratorWrapper)

class ConstraintIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.ConstraintIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.ConstraintIterator_differs(self, other)

    def clone(self, other):
        return _amplpython.ConstraintIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.ConstraintIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.ConstraintIterator_postIncrementBy(self, arg2)

    def first(self):
        return _amplpython.ConstraintIterator_first(self)

    def second(self):
        return _amplpython.ConstraintIterator_second(self)
    __swig_destroy__ = _amplpython.delete_ConstraintIterator
    __del__ = lambda self: None
ConstraintIterator_swigregister = _amplpython.ConstraintIterator_swigregister
ConstraintIterator_swigregister(ConstraintIterator)

class ObjectiveIteratorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectiveIteratorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectiveIteratorWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_ObjectiveIteratorWrapper
    __del__ = lambda self: None
ObjectiveIteratorWrapper_swigregister = _amplpython.ObjectiveIteratorWrapper_swigregister
ObjectiveIteratorWrapper_swigregister(ObjectiveIteratorWrapper)

class ObjectiveIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectiveIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectiveIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.ObjectiveIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.ObjectiveIterator_differs(self, other)

    def clone(self, other):
        return _amplpython.ObjectiveIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.ObjectiveIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.ObjectiveIterator_postIncrementBy(self, arg2)

    def first(self):
        return _amplpython.ObjectiveIterator_first(self)

    def second(self):
        return _amplpython.ObjectiveIterator_second(self)
    __swig_destroy__ = _amplpython.delete_ObjectiveIterator
    __del__ = lambda self: None
ObjectiveIterator_swigregister = _amplpython.ObjectiveIterator_swigregister
ObjectiveIterator_swigregister(ObjectiveIterator)

class SetIteratorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetIteratorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetIteratorWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_SetIteratorWrapper
    __del__ = lambda self: None
SetIteratorWrapper_swigregister = _amplpython.SetIteratorWrapper_swigregister
SetIteratorWrapper_swigregister(SetIteratorWrapper)

class SetIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.SetIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.SetIterator_differs(self, other)

    def clone(self, other):
        return _amplpython.SetIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.SetIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.SetIterator_postIncrementBy(self, arg2)

    def first(self):
        return _amplpython.SetIterator_first(self)

    def second(self):
        return _amplpython.SetIterator_second(self)
    __swig_destroy__ = _amplpython.delete_SetIterator
    __del__ = lambda self: None
SetIterator_swigregister = _amplpython.SetIterator_swigregister
SetIterator_swigregister(SetIterator)

class ParameterIteratorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterIteratorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterIteratorWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_ParameterIteratorWrapper
    __del__ = lambda self: None
ParameterIteratorWrapper_swigregister = _amplpython.ParameterIteratorWrapper_swigregister
ParameterIteratorWrapper_swigregister(ParameterIteratorWrapper)

class ParameterIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.ParameterIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.ParameterIterator_differs(self, other)

    def clone(self, other):
        return _amplpython.ParameterIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.ParameterIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.ParameterIterator_postIncrementBy(self, arg2)

    def first(self):
        return _amplpython.ParameterIterator_first(self)

    def second(self):
        return _amplpython.ParameterIterator_second(self)
    __swig_destroy__ = _amplpython.delete_ParameterIterator
    __del__ = lambda self: None
ParameterIterator_swigregister = _amplpython.ParameterIterator_swigregister
ParameterIterator_swigregister(ParameterIterator)

class EntityMapVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapVariable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.EntityMapVariable_begin(self)

    def end(self):
        return _amplpython.EntityMapVariable_end(self)

    def find(self, name):
        return _amplpython.EntityMapVariable_find(self, name)

    def size(self):
        return _amplpython.EntityMapVariable_size(self)

    def getIndex(self, name):
        return _amplpython.EntityMapVariable_getIndex(self, name)
    __swig_destroy__ = _amplpython.delete_EntityMapVariable
    __del__ = lambda self: None
EntityMapVariable_swigregister = _amplpython.EntityMapVariable_swigregister
EntityMapVariable_swigregister(EntityMapVariable)

class EntityMapVariableIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapVariableIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapVariableIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.EntityMapVariableIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.EntityMapVariableIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.EntityMapVariableIterator___ref__(self)

    def clone(self, other):
        return _amplpython.EntityMapVariableIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.EntityMapVariableIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.EntityMapVariableIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_EntityMapVariableIterator
    __del__ = lambda self: None
EntityMapVariableIterator_swigregister = _amplpython.EntityMapVariableIterator_swigregister
EntityMapVariableIterator_swigregister(EntityMapVariableIterator)

class EntityMapConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.EntityMapConstraint_begin(self)

    def end(self):
        return _amplpython.EntityMapConstraint_end(self)

    def find(self, name):
        return _amplpython.EntityMapConstraint_find(self, name)

    def size(self):
        return _amplpython.EntityMapConstraint_size(self)

    def getIndex(self, name):
        return _amplpython.EntityMapConstraint_getIndex(self, name)
    __swig_destroy__ = _amplpython.delete_EntityMapConstraint
    __del__ = lambda self: None
EntityMapConstraint_swigregister = _amplpython.EntityMapConstraint_swigregister
EntityMapConstraint_swigregister(EntityMapConstraint)

class EntityMapConstraintIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapConstraintIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapConstraintIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.EntityMapConstraintIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.EntityMapConstraintIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.EntityMapConstraintIterator___ref__(self)

    def clone(self, other):
        return _amplpython.EntityMapConstraintIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.EntityMapConstraintIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.EntityMapConstraintIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_EntityMapConstraintIterator
    __del__ = lambda self: None
EntityMapConstraintIterator_swigregister = _amplpython.EntityMapConstraintIterator_swigregister
EntityMapConstraintIterator_swigregister(EntityMapConstraintIterator)

class EntityMapObjective(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapObjective, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.EntityMapObjective_begin(self)

    def end(self):
        return _amplpython.EntityMapObjective_end(self)

    def find(self, name):
        return _amplpython.EntityMapObjective_find(self, name)

    def size(self):
        return _amplpython.EntityMapObjective_size(self)

    def getIndex(self, name):
        return _amplpython.EntityMapObjective_getIndex(self, name)
    __swig_destroy__ = _amplpython.delete_EntityMapObjective
    __del__ = lambda self: None
EntityMapObjective_swigregister = _amplpython.EntityMapObjective_swigregister
EntityMapObjective_swigregister(EntityMapObjective)

class EntityMapObjectiveIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapObjectiveIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapObjectiveIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.EntityMapObjectiveIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.EntityMapObjectiveIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.EntityMapObjectiveIterator___ref__(self)

    def clone(self, other):
        return _amplpython.EntityMapObjectiveIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.EntityMapObjectiveIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.EntityMapObjectiveIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_EntityMapObjectiveIterator
    __del__ = lambda self: None
EntityMapObjectiveIterator_swigregister = _amplpython.EntityMapObjectiveIterator_swigregister
EntityMapObjectiveIterator_swigregister(EntityMapObjectiveIterator)

class EntityMapSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapSet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.EntityMapSet_begin(self)

    def end(self):
        return _amplpython.EntityMapSet_end(self)

    def find(self, name):
        return _amplpython.EntityMapSet_find(self, name)

    def size(self):
        return _amplpython.EntityMapSet_size(self)

    def getIndex(self, name):
        return _amplpython.EntityMapSet_getIndex(self, name)
    __swig_destroy__ = _amplpython.delete_EntityMapSet
    __del__ = lambda self: None
EntityMapSet_swigregister = _amplpython.EntityMapSet_swigregister
EntityMapSet_swigregister(EntityMapSet)

class EntityMapSetIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapSetIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapSetIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.EntityMapSetIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.EntityMapSetIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.EntityMapSetIterator___ref__(self)

    def clone(self, other):
        return _amplpython.EntityMapSetIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.EntityMapSetIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.EntityMapSetIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_EntityMapSetIterator
    __del__ = lambda self: None
EntityMapSetIterator_swigregister = _amplpython.EntityMapSetIterator_swigregister
EntityMapSetIterator_swigregister(EntityMapSetIterator)

class EntityMapParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def begin(self):
        return _amplpython.EntityMapParameter_begin(self)

    def end(self):
        return _amplpython.EntityMapParameter_end(self)

    def find(self, name):
        return _amplpython.EntityMapParameter_find(self, name)

    def size(self):
        return _amplpython.EntityMapParameter_size(self)

    def getIndex(self, name):
        return _amplpython.EntityMapParameter_getIndex(self, name)
    __swig_destroy__ = _amplpython.delete_EntityMapParameter
    __del__ = lambda self: None
EntityMapParameter_swigregister = _amplpython.EntityMapParameter_swigregister
EntityMapParameter_swigregister(EntityMapParameter)

class EntityMapParameterIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityMapParameterIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityMapParameterIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.EntityMapParameterIterator_equals(self, other)

    def differs(self, other):
        return _amplpython.EntityMapParameterIterator_differs(self, other)

    def __ref__(self):
        return _amplpython.EntityMapParameterIterator___ref__(self)

    def clone(self, other):
        return _amplpython.EntityMapParameterIterator_clone(self, other)

    def postIncrement(self):
        return _amplpython.EntityMapParameterIterator_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.EntityMapParameterIterator_postIncrementBy(self, arg2)
    __swig_destroy__ = _amplpython.delete_EntityMapParameterIterator
    __del__ = lambda self: None
EntityMapParameterIterator_swigregister = _amplpython.EntityMapParameterIterator_swigregister
EntityMapParameterIterator_swigregister(EntityMapParameterIterator)

class AMPLException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AMPLException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AMPLException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_AMPLException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_AMPLException
    __del__ = lambda self: None

    def getSourceName(self):
        return _amplpython.AMPLException_getSourceName(self)

    def getLineNumber(self):
        return _amplpython.AMPLException_getLineNumber(self)

    def getOffset(self):
        return _amplpython.AMPLException_getOffset(self)

    def getMessage(self):
        return _amplpython.AMPLException_getMessage(self)
AMPLException_swigregister = _amplpython.AMPLException_swigregister
AMPLException_swigregister(AMPLException)

class ErrorHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ErrorHandler:
            _self = None
        else:
            _self = self
        this = _amplpython.new_ErrorHandler(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_ErrorHandler
    __del__ = lambda self: None

    def error(self, arg0):
        return _amplpython.ErrorHandler_error(self, arg0)

    def warning(self, arg0):
        return _amplpython.ErrorHandler_warning(self, arg0)
    def __disown__(self):
        self.this.disown()
        _amplpython.disown_ErrorHandler(self)
        return weakref_proxy(self)
ErrorHandler_swigregister = _amplpython.ErrorHandler_swigregister
ErrorHandler_swigregister(ErrorHandler)

class Runnable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Runnable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Runnable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_Runnable
    __del__ = lambda self: None

    def run(self):
        return _amplpython.Runnable_run(self)

    def __init__(self):
        if self.__class__ == Runnable:
            _self = None
        else:
            _self = self
        this = _amplpython.new_Runnable(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _amplpython.disown_Runnable(self)
        return weakref_proxy(self)
Runnable_swigregister = _amplpython.Runnable_swigregister
Runnable_swigregister(Runnable)


_amplpython.WAITING_swigconstant(_amplpython)
WAITING = _amplpython.WAITING

_amplpython.BREAK_swigconstant(_amplpython)
BREAK = _amplpython.BREAK

_amplpython.CD_swigconstant(_amplpython)
CD = _amplpython.CD

_amplpython.DISPLAY_swigconstant(_amplpython)
DISPLAY = _amplpython.DISPLAY

_amplpython.EXIT_swigconstant(_amplpython)
EXIT = _amplpython.EXIT

_amplpython.EXPAND_swigconstant(_amplpython)
EXPAND = _amplpython.EXPAND

_amplpython.LOAD_swigconstant(_amplpython)
LOAD = _amplpython.LOAD

_amplpython.OPTION_swigconstant(_amplpython)
OPTION = _amplpython.OPTION

_amplpython.PRINT_swigconstant(_amplpython)
PRINT = _amplpython.PRINT

_amplpython.PROMPT_swigconstant(_amplpython)
PROMPT = _amplpython.PROMPT

_amplpython.SOLUTION_swigconstant(_amplpython)
SOLUTION = _amplpython.SOLUTION

_amplpython.SOLVE_swigconstant(_amplpython)
SOLVE = _amplpython.SOLVE

_amplpython.SHOW_swigconstant(_amplpython)
SHOW = _amplpython.SHOW

_amplpython.XREF_swigconstant(_amplpython)
XREF = _amplpython.XREF

_amplpython.SHELL_OUTPUT_swigconstant(_amplpython)
SHELL_OUTPUT = _amplpython.SHELL_OUTPUT

_amplpython.SHELL_MESSAGE_swigconstant(_amplpython)
SHELL_MESSAGE = _amplpython.SHELL_MESSAGE

_amplpython.MISC_swigconstant(_amplpython)
MISC = _amplpython.MISC

_amplpython.WRITE_TABLE_swigconstant(_amplpython)
WRITE_TABLE = _amplpython.WRITE_TABLE

_amplpython.READ_TABLE_swigconstant(_amplpython)
READ_TABLE = _amplpython.READ_TABLE

_amplpython._READTABLE_swigconstant(_amplpython)
_READTABLE = _amplpython._READTABLE

_amplpython._WRITETABLE_swigconstant(_amplpython)
_WRITETABLE = _amplpython._WRITETABLE

_amplpython.BREAKPOINT_swigconstant(_amplpython)
BREAKPOINT = _amplpython.BREAKPOINT

_amplpython.CALL_swigconstant(_amplpython)
CALL = _amplpython.CALL

_amplpython.CHECK_swigconstant(_amplpython)
CHECK = _amplpython.CHECK

_amplpython.CLOSE_swigconstant(_amplpython)
CLOSE = _amplpython.CLOSE

_amplpython.COMMANDS_swigconstant(_amplpython)
COMMANDS = _amplpython.COMMANDS

_amplpython.CONTINUE_swigconstant(_amplpython)
CONTINUE = _amplpython.CONTINUE

_amplpython.DATA_swigconstant(_amplpython)
DATA = _amplpython.DATA

_amplpython.DELETECMD_swigconstant(_amplpython)
DELETECMD = _amplpython.DELETECMD

_amplpython.DROP_swigconstant(_amplpython)
DROP = _amplpython.DROP

_amplpython.DROP_OR_RESTORE_ALL_swigconstant(_amplpython)
DROP_OR_RESTORE_ALL = _amplpython.DROP_OR_RESTORE_ALL

_amplpython.ELSE_swigconstant(_amplpython)
ELSE = _amplpython.ELSE

_amplpython.ELSE_CHECK_swigconstant(_amplpython)
ELSE_CHECK = _amplpython.ELSE_CHECK

_amplpython.ENDIF_swigconstant(_amplpython)
ENDIF = _amplpython.ENDIF

_amplpython.ENVIRON_swigconstant(_amplpython)
ENVIRON = _amplpython.ENVIRON

_amplpython.FIX_swigconstant(_amplpython)
FIX = _amplpython.FIX

_amplpython.FOR_swigconstant(_amplpython)
FOR = _amplpython.FOR

_amplpython.IF_swigconstant(_amplpython)
IF = _amplpython.IF

_amplpython.LET_swigconstant(_amplpython)
LET = _amplpython.LET

_amplpython.LOOPEND_swigconstant(_amplpython)
LOOPEND = _amplpython.LOOPEND

_amplpython.OBJECTIVE_swigconstant(_amplpython)
OBJECTIVE = _amplpython.OBJECTIVE

_amplpython.OPTION_RESET_swigconstant(_amplpython)
OPTION_RESET = _amplpython.OPTION_RESET

_amplpython.PRINTF_swigconstant(_amplpython)
PRINTF = _amplpython.PRINTF

_amplpython.PROBLEM_swigconstant(_amplpython)
PROBLEM = _amplpython.PROBLEM

_amplpython.PURGE_swigconstant(_amplpython)
PURGE = _amplpython.PURGE

_amplpython.RBRACE_swigconstant(_amplpython)
RBRACE = _amplpython.RBRACE

_amplpython.READ_swigconstant(_amplpython)
READ = _amplpython.READ

_amplpython.RELOAD_swigconstant(_amplpython)
RELOAD = _amplpython.RELOAD

_amplpython.REMOVE_swigconstant(_amplpython)
REMOVE = _amplpython.REMOVE

_amplpython.REPEAT_swigconstant(_amplpython)
REPEAT = _amplpython.REPEAT

_amplpython.REPEAT_END_swigconstant(_amplpython)
REPEAT_END = _amplpython.REPEAT_END

_amplpython.RESET_swigconstant(_amplpython)
RESET = _amplpython.RESET

_amplpython.RESTORE_swigconstant(_amplpython)
RESTORE = _amplpython.RESTORE

_amplpython.RUN_ARGS_swigconstant(_amplpython)
RUN_ARGS = _amplpython.RUN_ARGS

_amplpython.SEMICOLON_swigconstant(_amplpython)
SEMICOLON = _amplpython.SEMICOLON

_amplpython.SSTEP_swigconstant(_amplpython)
SSTEP = _amplpython.SSTEP

_amplpython.THEN_swigconstant(_amplpython)
THEN = _amplpython.THEN

_amplpython.UNFIX_swigconstant(_amplpython)
UNFIX = _amplpython.UNFIX

_amplpython.UNLOAD_swigconstant(_amplpython)
UNLOAD = _amplpython.UNLOAD

_amplpython.UPDATE_swigconstant(_amplpython)
UPDATE = _amplpython.UPDATE

_amplpython.WRITE_swigconstant(_amplpython)
WRITE = _amplpython.WRITE
class OutputHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _amplpython.delete_OutputHandler
    __del__ = lambda self: None

    def output(self, kind, msg):
        return _amplpython.OutputHandler_output(self, kind, msg)

    def __init__(self):
        if self.__class__ == OutputHandler:
            _self = None
        else:
            _self = self
        this = _amplpython.new_OutputHandler(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _amplpython.disown_OutputHandler(self)
        return weakref_proxy(self)
OutputHandler_swigregister = _amplpython.OutputHandler_swigregister
OutputHandler_swigregister(OutputHandler)

class EnvironmentIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvironmentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnvironmentIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _amplpython.new_EnvironmentIterator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_EnvironmentIterator
    __del__ = lambda self: None
EnvironmentIterator_swigregister = _amplpython.EnvironmentIterator_swigregister
EnvironmentIterator_swigregister(EnvironmentIterator)

class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)
    __repr__ = _swig_repr

    def Clone(self, other):
        return _amplpython.Environment_Clone(self, other)

    def __init__(self, *args):
        this = _amplpython.new_Environment(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_Environment
    __del__ = lambda self: None

    def put(self, name, value):
        return _amplpython.Environment_put(self, name, value)

    def setBinDir(self, binaryDirectory):
        return _amplpython.Environment_setBinDir(self, binaryDirectory)

    def getBinDir(self):
        return _amplpython.Environment_getBinDir(self)

    def toString(self):
        return _amplpython.Environment_toString(self)

    def begin(self):
        return _amplpython.Environment_begin(self)

    def end(self):
        return _amplpython.Environment_end(self)

    def find(self, name):
        return _amplpython.Environment_find(self, name)
Environment_swigregister = _amplpython.Environment_swigregister
Environment_swigregister(Environment)

class EnvironmentIteratorTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnvironmentIteratorTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnvironmentIteratorTemplate, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        return _amplpython.EnvironmentIteratorTemplate_equals(self, other)

    def differs(self, other):
        return _amplpython.EnvironmentIteratorTemplate_differs(self, other)

    def Clone(self, other):
        return _amplpython.EnvironmentIteratorTemplate_Clone(self, other)

    def postIncrement(self):
        return _amplpython.EnvironmentIteratorTemplate_postIncrement(self)

    def postIncrementBy(self, arg2):
        return _amplpython.EnvironmentIteratorTemplate_postIncrementBy(self, arg2)

    def first(self):
        return _amplpython.EnvironmentIteratorTemplate_first(self)

    def second(self):
        return _amplpython.EnvironmentIteratorTemplate_second(self)
    __swig_destroy__ = _amplpython.delete_EnvironmentIteratorTemplate
    __del__ = lambda self: None
EnvironmentIteratorTemplate_swigregister = _amplpython.EnvironmentIteratorTemplate_swigregister
EnvironmentIteratorTemplate_swigregister(EnvironmentIteratorTemplate)

class AMPL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AMPL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AMPL, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _amplpython.new_AMPL(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _amplpython.delete_AMPL
    __del__ = lambda self: None

    def getEntity(self, name):
        return _amplpython.AMPL_getEntity(self, name)

    def getVariable(self, name):
        return _amplpython.AMPL_getVariable(self, name)

    def getConstraint(self, name):
        return _amplpython.AMPL_getConstraint(self, name)

    def getObjective(self, name):
        return _amplpython.AMPL_getObjective(self, name)

    def getSet(self, name):
        return _amplpython.AMPL_getSet(self, name)

    def getParameter(self, name):
        return _amplpython.AMPL_getParameter(self, name)

    def eval(self, amplstatements):
        return _amplpython.AMPL_eval(self, amplstatements)

    def reset(self):
        return _amplpython.AMPL_reset(self)

    def close(self):
        return _amplpython.AMPL_close(self)

    def isRunning(self):
        return _amplpython.AMPL_isRunning(self)

    def isBusy(self):
        return _amplpython.AMPL_isBusy(self)

    def solve(self):
        return _amplpython.AMPL_solve(self)

    def readAsync(self, filename, cb):
        return _amplpython.AMPL_readAsync(self, filename, cb)

    def readDataAsync(self, filename, cb):
        return _amplpython.AMPL_readDataAsync(self, filename, cb)

    def evalAsync(self, amplstatement, cb):
        return _amplpython.AMPL_evalAsync(self, amplstatement, cb)

    def solveAsync(self, cb):
        return _amplpython.AMPL_solveAsync(self, cb)

    def interrupt(self):
        return _amplpython.AMPL_interrupt(self)

    def cd(self, *args):
        return _amplpython.AMPL_cd(self, *args)

    def setOption(self, name, value):
        return _amplpython.AMPL_setOption(self, name, value)

    def getOption(self, name):
        return _amplpython.AMPL_getOption(self, name)

    def getIntOption(self, name):
        return _amplpython.AMPL_getIntOption(self, name)

    def setIntOption(self, name, value):
        return _amplpython.AMPL_setIntOption(self, name, value)

    def getDblOption(self, name):
        return _amplpython.AMPL_getDblOption(self, name)

    def setDblOption(self, name, value):
        return _amplpython.AMPL_setDblOption(self, name, value)

    def getBoolOption(self, name):
        return _amplpython.AMPL_getBoolOption(self, name)

    def setBoolOption(self, name, value):
        return _amplpython.AMPL_setBoolOption(self, name, value)

    def read(self, fileName):
        return _amplpython.AMPL_read(self, fileName)

    def readData(self, fileName):
        return _amplpython.AMPL_readData(self, fileName)

    def getValue(self, scalarExpression):
        return _amplpython.AMPL_getValue(self, scalarExpression)

    def setData(self, *args):
        return _amplpython.AMPL_setData(self, *args)

    def toString(self):
        return _amplpython.AMPL_toString(self)

    def readTable(self, tableName):
        return _amplpython.AMPL_readTable(self, tableName)

    def writeTable(self, tableName):
        return _amplpython.AMPL_writeTable(self, tableName)

    def show(self, entities):
        return _amplpython.AMPL_show(self, entities)

    def expand(self, entities):
        return _amplpython.AMPL_expand(self, entities)

    def setOutputHandler(self, outputhandler):
        return _amplpython.AMPL_setOutputHandler(self, outputhandler)

    def setErrorHandler(self, errorhandler):
        return _amplpython.AMPL_setErrorHandler(self, errorhandler)

    def getOutputHandler(self):
        return _amplpython.AMPL_getOutputHandler(self)

    def getErrorHandler(self):
        return _amplpython.AMPL_getErrorHandler(self)

    def getVariables(self):
        return _amplpython.AMPL_getVariables(self)

    def getConstraints(self):
        return _amplpython.AMPL_getConstraints(self)

    def getObjectives(self):
        return _amplpython.AMPL_getObjectives(self)

    def getSets(self):
        return _amplpython.AMPL_getSets(self)

    def getParameters(self):
        return _amplpython.AMPL_getParameters(self)

    def display(self, *args):
        return _amplpython.AMPL_display(self, *args)

    def getData(self, args, count):
        return _amplpython.AMPL_getData(self, args, count)
AMPL_swigregister = _amplpython.AMPL_swigregister
AMPL_swigregister(AMPL)

# This file is compatible with both classic and new-style classes.


